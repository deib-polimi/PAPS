# network size
SIZE 5

# connectivity
CONNECTIVITY SIZE - 1

# number of distinct functions in the system
ENTROPY 5

# the maximum capacity available to each node (GB)
CAPACITY 64

# the maximum variation of demand at each cycle
DELTADEMAND 0

# the physical time in milliseconds between two small cycles
DELTATICK 3000

# parameters of periodic execution
CYCLES 100
CYCLE SIZE*10000
NODE_CYCLE CYCLE / 5
COMMUNITY_CYCLE CYCLE

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE


################### topol ===========================

network.node it.polimi.ppap.topology.FogNode

################### protocols ===========================

protocol.link peersim.core.IdleProtocol

protocol.np it.polimi.ppap.protocol.NodeProtocol
protocol.np.step CYCLE / 10
protocol.np.step NODE_CYCLE

protocol.cp it.polimi.ppap.protocol.CommunityProtocol
protocol.cp.linkable link
protocol.cp.step COMMUNITY_CYCLE
protocol.cp.step CYCLE
protocol.cp.transport tr
protocol.cp.nodeprotocol np

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

################### initialization ======================

init.rndlink WireKOut
init.rndlink.k CONNECTIVITY
init.rndlink.protocol link
init.rndlink.undir true

#init.vals LinearDistribution
#init.vals.protocol cp
#init.vals.max SIZE
#init.vals.min 1

init.ms it.polimi.ppap.control.MemberStateInitializer
init.ms.protocol cp

init.ns it.polimi.ppap.control.NodeStateInitializer
init.ns.protocol np
init.ns.delta DELTATICK
init.ns.capacity CAPACITY
init.ns.entropy ENTROPY

init.cpsch CDScheduler
init.cpsch.protocol cp
init.cpsch.randstart

init.npsch CDScheduler
init.npsch.protocol np
init.npsch.randstart


################ control ==============================

#control.0 SingleValueObserver
#control.0.protocol cp
#control.0.step CYCLE

control.df DemandFluctuation
control.df.protocol cp
control.df.step NODE_CYCLE
control.df.delta DELTADEMAND

control.df TimeTick
control.df.protocol cp
control.df.step NODE_CYCLE
control.df.delta DELTATICK